{"version":3,"sources":["index.js"],"names":["options","value","label","MyForm","props","imageChangeHandler","event","state","dimension","bitdepth","setState","imageString","target","warnings","dimensionChange","dim","isNaN","bitdepthChangeHandler","placeholderCol","r","g","b","this","x","i","length","key","pixelColor","pixelText","pixelDimension","String","parseInt","fontDim","multiplyr","testBinaryStr","rgb","rgbCols","splitNChars","className","style","backgroundColor","height","width","fontSize","verticalAlign","arr","pixels","push","renderBinaryPixel","txt","num","result","substr","pixelIndex","grid","text","replace","split","join","textArr","row","j","image","renderBinaryRow","numPix","display","type","onChange","fontColor","placeholder","getWarning","explain","minHeight","maxHeight","minWidth","maxWidth","renderBinaryImage","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0a2df903.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Select from 'react-select';\nimport './index.css';\n\nconst options = [\n  { value: 1, label: '1 Bit - Schwarz/Weiss' },\n  { value: 2, label: '2 Bit - Graustufen' },\n  { value: 8, label: '8 Bit - Graustufen' },\n  { value: 9, label: '3 Bit - RGB'},\n  { value: 24, label: '8 Bit - RGB'}\n];\n\n\nclass MyForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      imageString: '',\n      dimension: 0,\n      warnings: [],\n      bitdepth: 0,\n      placeholderCol: 'red'\n    };\n  }\n\n  imageChangeHandler = (event) => {\n    if (this.state.dimension > 0 && this.state.bitdepth > 0) {\n      this.setState({ imageString: event.target.value });\n      this.setState({ warnings: [] });\n    }\n\n  }\n\n  dimensionChange = (event) => {\n    let max = 40;\n    let dim = event.target.value\n\n    if (isNaN(dim)) dim = 0;\n    if (dim > max) dim = max;\n\n    this.setState({ dimension: dim });\n\n    this.setState({ warnings: [] });\n  }\n\n  bitdepthChangeHandler = (event) => {\n    this.setState({ bitdepth: event.value });\n  }\n\n\n  rgb(r, g, b) {\n    return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n  }\n\n  getWarning() {\n    if (this.state.dimension <= 0) {\n      return \"Lege zuerst die Dimension des Bildes fest\";\n    } else if (this.state.bitdepth <= 0) {\n      return \"Lege zuerst die Bittiefe des Bildes fest\";\n    } else {\n      return \"\";\n    }\n  }\n\n  testBinaryStr(x){\n    for(let i = 0; i < x.length; i++){\n      if(x[i] != \"0\" && x[i] != \"1\"){\n        return false;\n      }\n    }\n    return true;\n  }\n\n  renderBinaryPixel(x, key) {\n\n    let pixelText = \"\";\n    let pixelColor;\n    let pixelDimension = String(parseInt(480 / this.state.dimension)) + \"px\";\n    let fontDim = String(480 / this.state.dimension) * 1 + \"px\";\n\n    let multiplyr = 255 / (2 ** this.state.bitdepth - 1);\n\n    if(!x || (x.length < this.state.bitdepth) || !this.testBinaryStr(x)){\n      pixelText = \"?\";\n      pixelColor = this.rgb(255, 255, 255);\n    } else if (this.state.bitdepth > 8){\n      let rgbCols = this.splitNChars(x, this.state.bitdepth/3);\n      multiplyr = 255 / (2 ** (this.state.bitdepth/3) - 1);\n      pixelColor = this.rgb(parseInt(rgbCols[0], 2)*multiplyr, parseInt(rgbCols[1], 2)*multiplyr, parseInt(rgbCols[2], 2)*multiplyr);\n    } else {\n      pixelColor = this.rgb(parseInt(x, 2)*multiplyr, parseInt(x, 2)*multiplyr, parseInt(x, 2)*multiplyr);\n    }\n\n    return (\n      <div\n        className=\"pixel\"\n        key={\"pixel_\" + key}\n        style={{\n          backgroundColor: pixelColor,\n          height: pixelDimension,\n          width: pixelDimension,\n          fontSize: fontDim\n        }}\n      >\n        <span style={{ verticalAlign: \"middle\" }}>{pixelText}</span>\n      </div>\n    );\n  }\n\n  renderBinaryRow(arr, key) {\n\n    let pixels = [];\n    for (let i = 0; i < arr.length; i++) {\n      pixels.push(this.renderBinaryPixel(arr[i], i));\n    }\n\n    return (\n      <div className=\"image-row\" key={\"row\" + key}>\n        {pixels}\n      </div>\n    );\n  }\n\n  splitNChars(txt, num) {\n    var result = [];\n    for (var i = 0; i < txt.length; i += num) {\n      result.push(txt.substr(i, num));\n    }\n    return result;\n  }\n\n  explain(){\n    // <p>Nötige Länge der Bitabfolge: Pixel*Bittiefe = {this.state.dimension ** 2} * {this.state.bitdepth} = {this.state.dimension ** 2 * this.state.bitdepth} Bits</p>\n    if (this.state.bitdepth <= 8){\n      return (\"Pixel * Bittiefe = \" + this.state.dimension**2 + \" * \" + this.state.bitdepth +\n      \" = \" + this.state.dimension ** 2 * this.state.bitdepth + \" Bits\");\n    } else {\n      return (\"Pixel * (3 * Bittiefe) = \" + this.state.dimension**2 + \" * (3 * \" + this.state.bitdepth/3 +\n      \") = \" + this.state.dimension ** 2 * (3*this.state.bitdepth/3) + \" Bits\");\n    }\n  }\n\n\n  renderBinaryImage(arr) {\n\n    let pixelIndex = 0;\n    let grid = [];\n\n    let text = this.state.imageString.replace(/(\\r\\n|\\n|\\r)/gm, \"\").split(' ').join('');\n\n    let textArr = this.splitNChars(text, this.state.bitdepth);\n\n    for (let i = 0; i < this.state.dimension; i++) {\n      let row = [];\n      for (let j = 0; j < this.state.dimension; j++) {\n        let value = textArr[pixelIndex];\n\n        row.push(value);\n        // console.log(value);\n        // if (value && (value.length == this.state.bitdepth)) {\n        //    row.push(parseInt(value, 2));\n        //  } else {\n        //    row.push(NaN);\n        //  }\n\n        pixelIndex += 1;\n      }\n      grid.push(row);\n    }\n    let image = [];\n\n    for (let i = 0; i < grid.length; i++) {\n      image.push(this.renderBinaryRow(grid[i], i))\n    }\n\n    return (\n      <div>{image}</div>\n    );\n  }\n\n  render() {\n    let numPix = this.state.dimension ** 2;\n\n    return (\n      <div>\n        <div>\n          <div className=\"area\">\n            <div>\n              <h1>Binärbilder</h1>\n            </div>\n            <div style={{ display: \"table\" }}>\n              <div className=\"area\">\n                <h2>Dimension des Bildes</h2>\n                <p className=\"input-description\"> Anzahl Pixel pro Zeile/Spalte (max = 40): </p>\n                <input type=\"text\" className=\"small-text-input\" onChange={this.dimensionChange}></input>\n                <p>Total Anzahl Pixel: {numPix}</p>\n                <h2>Bittiefe</h2>\n                <Select onChange={this.bitdepthChangeHandler} options={options}\n                />\n                <h2>Bitsequenz</h2>\n                <textarea type='text' style={{ width: \"600px\", height: \"100px\", fontColor: \"red\" }} onChange={this.imageChangeHandler} placeholder={this.getWarning()} />\n                <p><b>Nötige Länge der Bitsequenz</b></p>\n                <p>{this.explain()}</p>\n                <p><b>Aktuelle Länge der Bitsequenz</b></p>\n                <p> {this.state.imageString.replace(/(\\r\\n|\\n|\\r)/gm, \"\").split(' ').join('').length}</p>\n              </div>\n              <div className=\"area\">\n                <h2>Resultierendes Binärbild</h2>\n                <div style={{ backgroundColor: \"white\", display: \"block\", minHeight: \"480px\", maxHeight: \"480px\", minWidth: \"480px\", maxWidth: \"480px\" }}>\n                  {this.renderBinaryImage(this.state.imageString)}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ============================================================\n\nReactDOM.render(\n  <MyForm />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}