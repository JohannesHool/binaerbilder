{"version":3,"sources":["index.js"],"names":["options","value","label","MyForm","props","imageChangeHandler","event","state","dimension","bitdepth","setState","imageString","target","warnings","dimensionChange","dim","isNaN","bitdepthChangeHandler","placeholderCol","r","g","b","this","x","i","length","key","depth","valueOf","pixelColor","pixelText","pixelDimension","String","parseInt","fontDim","multiplyr","testBinaryStr","rgb","rgbCols","splitNChars","className","style","backgroundColor","height","width","fontSize","verticalAlign","arr","pixels","push","renderBinaryPixel","txt","num","result","substr","replace","split","join","text","pixelIndex","grid","tmpText","bitSeq","k","number","j","convertedRunLenght","textArr","row","image","renderBinaryRow","numPix","display","type","onChange","maxWidth","explain0","fontColor","placeholder","getWarning","explain","explain2","minHeight","maxHeight","minWidth","renderBinaryImage","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2016ff1.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Select from 'react-select';\nimport './index.css';\n\nconst options = [\n  { value: 1, label: 'Schwarz/Weiss (1 Bit)' },\n  { value: 2, label: 'Graustufen (2 Bit)' },\n  { value: 8, label: 'Graustufen (8 Bit)' },\n  { value: 9, label: 'RGB9 (9 Bit)' },\n  { value: 24, label: 'RGB24 (24 Bit)' },\n  { value: 'runLengthDec', label: 'Lauflängenkodierung mit Dezimalzahlen' },\n  { value: 'runLengthBin', label: 'Lauflängenkodierung mit Binärzahlen (4 Bit)' }\n];\n\n\nclass MyForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      imageString: '',\n      dimension: 0,\n      warnings: [],\n      bitdepth: 0,\n      placeholderCol: 'red'\n    };\n  }\n\n  imageChangeHandler = (event) => {\n    if (this.state.dimension > 0 && this.state.bitdepth !== 0) {\n      this.setState({ imageString: event.target.value });\n      this.setState({ warnings: [] });\n    }\n  }\n\n  dimensionChange = (event) => {\n    let max = 40;\n    let dim = event.target.value\n\n    if (isNaN(dim)) dim = 0;\n    if (dim > max) dim = max;\n\n    this.setState({ dimension: dim });\n\n    this.setState({ warnings: [] });\n  }\n\n  bitdepthChangeHandler = (event) => {\n    this.setState({ bitdepth: event.value });\n  }\n\n\n  rgb(r, g, b) {\n    return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n  }\n\n  getWarning() {\n    if (this.state.dimension <= 0) {\n      return \"Lege zuerst die Dimension des Bildes fest\";\n    } else if (this.state.bitdepth <= 0) {\n      return \"Lege zuerst die Bittiefe des Bildes fest\";\n    } else {\n      return \"\";\n    }\n  }\n\n  testBinaryStr(x) {\n    for (let i = 0; i < x.length; i++) {\n      if (x[i] !== \"0\" && x[i] !== \"1\") {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  renderBinaryPixel(x, key) {\n    let depth = this.state.bitdepth.valueOf();\n    if (isNaN(depth)) {\n      depth = 1;\n    }\n    let pixelText = \"\";\n    let pixelColor;\n    let pixelDimension = String(parseInt(480 / this.state.dimension)) + \"px\";\n    let fontDim = String(480 / this.state.dimension) * 1 + \"px\";\n\n    let multiplyr = 255 / (2 ** depth - 1);\n\n    if (!x || (x.length < depth) || !this.testBinaryStr(x)) {\n      pixelText = \"?\";\n      pixelColor = this.rgb(255, 255, 255);\n    } else if (depth > 8) {\n      let rgbCols = this.splitNChars(x, depth / 3);\n      multiplyr = 255 / (2 ** (depth / 3) - 1);\n      pixelColor = this.rgb(parseInt(rgbCols[0], 2) * multiplyr, parseInt(rgbCols[1], 2) * multiplyr, parseInt(rgbCols[2], 2) * multiplyr);\n    } else {\n      pixelColor = this.rgb(parseInt(x, 2) * multiplyr, parseInt(x, 2) * multiplyr, parseInt(x, 2) * multiplyr);\n    }\n\n    return (\n      <div\n        className=\"pixel\"\n        key={\"pixel_\" + key}\n        style={{\n          backgroundColor: pixelColor,\n          height: pixelDimension,\n          width: pixelDimension,\n          fontSize: fontDim\n        }}\n      >\n        <span style={{ verticalAlign: \"middle\" }}>{pixelText}</span>\n      </div>\n    );\n  }\n\n  renderBinaryRow(arr, key) {\n\n    let pixels = [];\n    for (let i = 0; i < arr.length; i++) {\n      pixels.push(this.renderBinaryPixel(arr[i], i));\n    }\n\n    return (\n      <div className=\"image-row\" key={\"row\" + key}>\n        {pixels}\n      </div>\n    );\n  }\n\n  splitNChars(txt, num) {\n    var result = [];\n    for (var i = 0; i < txt.length; i += num) {\n      result.push(txt.substr(i, num));\n    }\n    return result;\n  }\n\n  explain0() {\n    switch(this.state.bitdepth){\n      case 0:\n        return \"\";\n      case 1:\n        return \"Die Bitsequenz soll eine Abfolge von einstelligen Binärzahlen sein. 0 wird als Schwarz und 1 als Weiss interpretiert. Zeilenumbrüche, Leerzeichen und Kommas werden ignoriert.\";\n      case 2:\n        return \"Die Bitsequenz soll eine Abfolge von zweistelligen Binärzahlen sein. 00 wird als Schwarz und 11 als Weiss interpretiert. Die Zahlen dazwischen stellen Graustufen dar. Zeilenumbrüche, Leerzeichen und Kommas werden ignoriert.\";\n      case 8:\n        return \"Die Bitsequenz soll eine Abfolge von achtstelligen Binärzahlen sein. 00000000 wird als Schwarz und 11111111 als Weiss interpretiert. Die Zahlen dazwischen stellen Graustufen dar. Zeilenumbrüche, Leerzeichen und Kommas werden ignoriert.\";\n      case 9:\n        return \"Die Bitsequenz soll eine Abfolge von neunstelligen Binärzahlen sein. Die ersten drei Stellen bestimmen die Rotintensität, die zweiten drei Stellen die Grünintensität und die letzten drei Stellen die Blauintensität. Zeilenumbrüche, Leerzeichen und Kommas werden ignoriert.\";\n      case 24:\n        return \"Die Bitsequenz soll eine Abfolge von vierundzwanzigstelligen Binärzahlen sein. Die ersten acht Stellen bestimmen die Rotintensität, die zweiten acht Stellen die Grünintensität und die letzten acht Stellen die Blauintensität. Zeilenumbrüche, Leerzeichen und Kommas werden ignoriert.\";\n      case 'runLengthDec':\n        return \"Es wird eine Sequenz von kommagetrenten Dezimalzahlen erwartet. Die Zahlen beschreiben die Lauflängenkodierung eines Schwarz/Weiss-Bildes, wobei mit Weiss begonnen wird. Leerzeichen werden ignoriert und Zeilenumbrüche als Kommas interpretiert.\"      \n      case 'runLengthBin':\n        return \"Es wird eine Sequenz von vierstelligen Binärzahlen erwartet. Die Zahlen beschreiben die Lauflängenkodierung eines Schwarz/Weiss-Bildes, wobei mit Weiss begonnen wird. Zeilenumbrüche, Leerzeichen und Kommas werden ignoriert.\"\n          }\n  }\n\n  explain() {\n    // <p>Nötige Länge der Bitabfolge: Pixel*Bittiefe = {this.state.dimension ** 2} * {this.state.bitdepth} = {this.state.dimension ** 2 * this.state.bitdepth} Bits</p>\n    if (isNaN(this.state.bitdepth)) {\n      return (\"-\");\n    } else if (this.state.bitdepth <= 8) {\n      return (\"Pixel * Bittiefe = \" + this.state.dimension ** 2 + \" * \" + this.state.bitdepth +\n        \" = \" + this.state.dimension ** 2 * this.state.bitdepth + \" Bits\");\n    } else {\n      return (\"Pixel * (3 * Bittiefe) = \" + this.state.dimension ** 2 + \" * (3 * \" + this.state.bitdepth / 3 +\n        \") = \" + this.state.dimension ** 2 * (3 * this.state.bitdepth / 3) + \" Bits\");\n    }\n  }\n\n  explain2(){\n    if(this.state.bitdepth === 'runLengthDec'){\n      return '-';\n    } else{\n      return this.state.imageString.replace(/(\\r\\n|\\n|\\r)/gm, \"\").split(' ').join('').split(',').join('').length;\n    }\n  }\n\n\n  renderBinaryImage() {\n    let depth = this.state.bitdepth.valueOf();\n    let text = this.state.imageString;\n    let pixelIndex = 0;\n    let grid = [];\n\n    if (isNaN(depth)) {\n      if(depth === 'runLengthDec'){\n        depth = 1;\n        let tmpText = text.valueOf().replace(/(\\r\\n|\\n|\\r)/gm, \",\").split(\" \").join(\"\").split(\",\");\n        let bitSeq = [];\n        for (let k = 0; k < tmpText.length; k++) {\n          let number = parseInt(tmpText[k]);\n          if (!isNaN(number)) {\n            if (k % 2 === 0) {\n              for (let j = 0; j < number; j++) {\n                bitSeq.push(1);\n              }\n            } else {\n              for (let j = 0; j < number; j++) {\n                bitSeq.push(0);\n              }\n            }\n          }\n        }\n        text = bitSeq.join('');        \n      } else {\n        depth = 1;\n        let tmpText = text.valueOf().replace(/(\\r\\n|\\n|\\r)/gm, \",\").split(\" \").join(\"\").split(\",\").join(\"\");\n        let convertedRunLenght = this.splitNChars(tmpText, 4);\n        let bitSeq = [];\n        for (let k = 0; k < convertedRunLenght.length; k++) {\n          let number = parseInt(convertedRunLenght[k], 2);\n          if (!isNaN(number)) {\n            if (k % 2 === 0) {\n              for (let j = 0; j < number; j++) {\n                bitSeq.push(1);\n              }\n            } else {\n              for (let j = 0; j < number; j++) {\n                bitSeq.push(0);\n              }\n            }\n          }\n        }\n        text = bitSeq.join('');\n      }\n\n    } else {\n      text = text.replace(/(\\r\\n|\\n|\\r)/gm, \"\").split(' ').join('').split(',').join('');\n    }\n\n    let textArr = this.splitNChars(text, depth);\n\n    for (let i = 0; i < this.state.dimension; i++) {\n      let row = [];\n      for (let j = 0; j < this.state.dimension; j++) {\n        let value = textArr[pixelIndex];\n\n        row.push(value);\n        pixelIndex += 1;\n      }\n      grid.push(row);\n    }\n    let image = [];\n\n    for (let i = 0; i < grid.length; i++) {\n      image.push(this.renderBinaryRow(grid[i], i))\n    }\n\n    return (\n      <div>{image}</div>\n    );\n  }\n\n  render() {\n    let numPix = this.state.dimension ** 2;\n\n    return (\n      <div>\n        <div>\n          <div className=\"area\">\n            <div>\n              <h1>Binärbilder</h1>\n            </div>\n            <div style={{ display: \"table\" }}>\n              <div className=\"area\">\n                <h2>Dimension des Bildes</h2>\n                <p className=\"input-description\"> Anzahl Pixel pro Zeile/Spalte (max = 40): </p>\n                <input type=\"text\" className=\"small-text-input\" onChange={this.dimensionChange}></input>\n                <p>Total Anzahl Pixel: {numPix}</p>\n                <h2>Bittiefe</h2>\n                <Select onChange={this.bitdepthChangeHandler} options={options}\n                />\n                <div style={{ maxWidth: \"600px\" }}>\n                  <p><i>{this.explain0()}</i></p>\n                </div>\n                <h2>Bitsequenz</h2>\n                <textarea type='text' style={{ width: \"600px\", height: \"100px\", fontColor: \"red\" }} onChange={this.imageChangeHandler} placeholder={this.getWarning()} />\n                <p><b>Nötige Länge der Bitsequenz</b></p>\n                <p>{this.explain()}</p>\n                <p><b>Aktuelle Länge der Bitsequenz</b></p>\n                <p> {this.explain2()}</p>\n              </div>\n              <div className=\"area\">\n                <h2>Resultierendes Binärbild</h2>\n                <div style={{ backgroundColor: \"white\", display: \"block\", minHeight: \"480px\", maxHeight: \"480px\", minWidth: \"480px\", maxWidth: \"480px\" }}>\n                  {this.renderBinaryImage()}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ============================================================\n\nReactDOM.render(\n  <MyForm />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}